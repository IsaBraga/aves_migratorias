aves_migratorias
================
#modelo RF

library(letsR)
library(maptools)
library (maps)
library (raster)
library (rgdal)
library (sp)
library(rgeos)
library (sqldf)
library (tcltk2)
library (testthat)
library(biomod2)


RF_model<-function(coord_spp, myExpl, myExplFut){
setwd("/media/leo/TATIANE 1/scrip_aves_migratorias/Resultados_CCSM")  

#organizar os dados no formato do myBiomodData
for(i in 1:length(coord_spp)){
  myRespName<-names(coord_pres[i])
  myResp<-rbind(cbind(coord_spp[[i]]$coord_finalRep_pres, pres_aus=rep(1, nrow(coord_spp[[i]]$coord_finalRep_pres))),
                cbind(coord_spp[[i]]$coord_finalRep_absence,  pres_aus=rep(0,nrow(coord_spp[[i]]$coord_finalRep_absence))))
  myBiomodData <- BIOMOD_FormatingData(resp.var =  myResp[,3],
                                       expl.var = myExpl,
                                       resp.xy = myResp[,1:2],
                                       resp.name = myRespName)
  myBiomodOption <- BIOMOD_ModelingOptions()
  
  #rodar o modelo
  myBiomodModelOut <- BIOMOD_Modeling(myBiomodData,
                                      models = 'RF',
                                      models.options = myBiomodOption,
                                      NbRunEval=3,
                                      DataSplit=100,
                                      Prevalence=0.5,
                                      VarImport=3,
                                      models.eval.meth = 'TSS',
                                      SaveObj = TRUE,
                                      rescal.all.models = TRUE,
                                      do.full.models = FALSE,
                                      modeling.id = myExpl@filename )
  
  #salvar os valores das avaliacoes
  # capture.output(get_evaluations(myBiomodModelOut),
  #               file=file.path(myBiomodModelOut@sp.name,
  #                              paste(myRespName, "_formal_models_evaluation.txt", sep="")))
  
  #salvar a importancia das variaveis explanatorias
  capture.output(get_variables_importance(myBiomodModelOut),
                 file=file.path(myBiomodModelOut@sp.name,
                                paste(myRespName,"_formal_models_variables_importance.txt", sep="")))
  
  if (sum(myBiomodModelOut@models.evaluation@val[c(2,10,18)]>0.6)>=2){
  
  #fazer o emsemble dos 3 modelos (RF) rodados
  myBiomodEM <- BIOMOD_EnsembleModeling(modeling.output = myBiomodModelOut,
                                       chosen.models = 'all',
                                       em.by='all',
                                       eval.metric = 'TSS',
                                       eval.metric.quality.threshold = c(0.6),
                                       prob.mean = T,
                                       prob.cv = F,
                                       prob.ci = F,
                                       prob.ci.alpha = 0.05,
                                       prob.median = F,
                                       committee.averaging = F,
                                       prob.mean.weight = F,
                                       prob.mean.weight.decay = 'proportional' )
  
  #salvar o resultado dos 3 modelos (RF)
  capture.output(get_evaluations(myBiomodEM),
                 file=file.path(myBiomodModelOut@sp.name,
                                paste(myRespName,"_ensemble_RF.txt", sep="")))
 
  #fazer as projecoes
  myBiomodProj <- BIOMOD_Projection(modeling.output = myBiomodModelOut,
                                    new.env = myExplFut,
                                    proj.name = 'future26',
                                    selected.models = 'all',
                                    binary.meth = 'TSS',
                                    compress = 'xz',
                                    clamping.mask = F,
                                    output.format = '.grd')
  #fazer o emsamble das projecoes
  myBiomodEF <- BIOMOD_EnsembleForecasting(projection.output = myBiomodProj,
                                           EM.output = myBiomodEM,
                                           proj.name = myExplFut@filename)
  
  #cortar, reclassificar e calcular midpoint
  myBiomodEF_points<-mask(myBiomodEF@proj@val, neotropical)
  reclas<-reclassify (myBiomodEF_points, c(-Inf, xxx, 0, xxx, Inf, 1))
  
  # validation with polygons

  poly_sp<- readShapePoly (...)
  r_spp <- raster(extent(poly_sp))
  res(r_spp)=0.05
  r_spp <- rasterize(poly_sp, field="", r_spp)
  
  plot (r_spp)
  
  r_spp_reclas<- reclassify (r_spp, c(-Inf, 1, 0, 1, +Inf, 2)
  test<- r_spp_reclass + reclas
  ## number of pixels with 3 / number of pixels with 3 + number of pixels with 2 == sensitivity
  ## number of pixels with 1 / number of pixels with 2 + number of pixels with 1 == specificity
  

    
  reclas_points<- rasterToPoints(reclas)
  write.table(reclas_points, file=paste(myRespName, "reclasPoints.txt", sep="_"), quote=F, col.names=T, row.names=F)
  
  mid_point<-lets.midpoint(reclas_points, planar=FALSE)
  write.table(mid_point, file=paste(myRespName, "midPoint.txt", sep="_"), quote=F, col.names=T, row.names=F)
  
  }}}












